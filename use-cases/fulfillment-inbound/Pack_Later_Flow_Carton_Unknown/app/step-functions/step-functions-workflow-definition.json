{
  "Comment": "Fulfillment Inbound v2024 No Carton Known LTL End to End shipment creation state machine",
  "StartAt": "createInboundPlan",
  "States": {
    "createInboundPlan": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${CreateInboundPlanLambdaFunctionArn}",
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "destinationMarketplace.$": "$.createInboundPlanRequest.destinationMarketplace",
          "msku.$": "$.createInboundPlanRequest.msku",
          "prepOwner.$": "$.createInboundPlanRequest.prepOwner",
          "labelOwner.$": "$.createInboundPlanRequest.labelOwner",
          "sourceAddress.$": "$.createInboundPlanRequest.sourceAddress",
          "inboundPlanName.$": "$.createInboundPlanRequest.inboundPlanName"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "ResultPath": "$.createInboundPlanResult",
      "ResultSelector": {
        "inboundPlanId.$": "$.Payload.inboundPlanId",
        "operationId.$": "$.Payload.operationId"
      },
      "Next": "createInboundOperationStatus"
    },
    "createInboundOperationStatus": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${OperationStatusLambdaFunctionArn}",
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "operationId.$": "$.createInboundPlanResult.operationId"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "createInboundOperationStatusCheck",
      "ResultPath": "$.getInboundPlanOperationStatus",
      "ResultSelector": {
        "operationStatus.$": "$.Payload.operationStatus",
        "operationProblems.$": "$.Payload.operationProblems"
      }
    },
    "createInboundOperationStatusCheck": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.getInboundPlanOperationStatus.operationStatus",
          "StringEquals": "IN_PROGRESS",
          "Next": "createInboundOperationInProgress"
        },
        {
          "Variable": "$.getInboundPlanOperationStatus.operationStatus",
          "StringEquals": "FAILED",
          "Next": "createInboundOperationFailed"
        }
      ],
      "Default": "generatePlacementOptions"
    },
    "generatePlacementOptions": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${GeneratePlacementOptionsLambdaFunctionArn}",
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "inboundPlanId.$": "$.createInboundPlanResult.inboundPlanId"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "generatePlacementOperationStatus",
      "ResultSelector": {
        "operationId.$": "$.Payload.operationId"
      },
      "ResultPath": "$.generatePlacementOptionsResult"
    },
    "generatePlacementOperationStatus": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${OperationStatusLambdaFunctionArn}",
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "operationId.$": "$.generatePlacementOptionsResult.operationId"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "generatePlacementOperationStatusCheck",
      "ResultSelector": {
        "operationStatus.$": "$.Payload.operationStatus",
        "operationProblems.$": "$.Payload.operationProblems"
      },
      "ResultPath": "$.generatePlacementOperationStatus"
    },
    "listPlacementOptions": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "inboundPlanId.$": "$.createInboundPlanResult.inboundPlanId"
        },
        "FunctionName": "${ListPlacementOptionsLambdaFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "confirmPlacementOption",
      "ResultSelector": {
        "shipmentId.$": "$.Payload.shipmentId",
        "placementOptionId.$": "$.Payload.placementOptionId"
      },
      "ResultPath": "$.listPlacementOptionsResult"
    },
    "createInboundOperationInProgress": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "createInboundOperationStatus"
    },
    "confirmPlacementOption": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "inboundPlanId.$": "$.createInboundPlanResult.inboundPlanId",
          "placementOptionId.$": "$.listPlacementOptionsResult.placementOptionId"
        },
        "FunctionName": "${ConfirmPlacementOptionLambdaFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "confirmPlacementOperationStatus",
      "ResultSelector": {
        "operationId.$": "$.Payload.operationId"
      },
      "ResultPath": "$.confirmPlacementOptionResult"
    },
    "confirmPlacementOperationStatus": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${OperationStatusLambdaFunctionArn}",
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "operationId.$": "$.confirmPlacementOptionResult.operationId"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "confirmPlacementOperationStatusCheck",
      "ResultSelector": {
        "operationStatus.$": "$.Payload.operationStatus",
        "operationProblems.$": "$.Payload.operationProblems"
      },
      "ResultPath": "$.confirmPlacementOperationStatus"
    },
    "confirmPlacementOperationStatusCheck": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.confirmPlacementOperationStatus.operationStatus",
          "StringEquals": "FAILED",
          "Next": "confirmPlacementOperationFailed"
        },
        {
          "Variable": "$.confirmPlacementOperationStatus.operationStatus",
          "StringEquals": "IN_PROGRESS",
          "Next": "confirmPlacementOperationInProgress"
        }
      ],
      "Default": "setPackingInformation"
    },
    "setPackingInformation": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "inboundPlanId.$": "$.createInboundPlanResult.inboundPlanId",
          "shipmentId.$": "$.listPlacementOptionsResult.shipmentId",
          "msku.$": "$.createInboundPlanRequest.msku",
          "prepOwner.$": "$.createInboundPlanRequest.prepOwner",
          "labelOwner.$": "$.createInboundPlanRequest.labelOwner",
          "boxWeight.$": "$.setPackingInformationRequest.boxWeight",
          "boxDimensions.$": "$.setPackingInformationRequest.boxDimensions"
        },
        "FunctionName": "${SetPackingInformationLambdaFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "setPackingOperationStatus",
      "ResultSelector": {
        "operationId.$": "$.Payload.operationId"
      },
      "ResultPath": "$.setPackingInformationResult"
    },
    "setPackingOperationStatus": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "operationId.$": "$.setPackingInformationResult.operationId"
        },
        "FunctionName": "${OperationStatusLambdaFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "setPackingOperationStatusCheck",
      "ResultSelector": {
        "operationStatus.$": "$.Payload.operationStatus",
        "operationProblems.$": "$.Payload.operationProblems"
      },
      "ResultPath": "$.setPackingOperationStatus"
    },
    "setPackingOperationStatusCheck": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.setPackingOperationStatus.operationStatus",
          "StringEquals": "IN_PROGRESS",
          "Next": "setPackingOperationInProgress"
        },
        {
          "Variable": "$.setPackingOperationStatus.operationStatus",
          "StringEquals": "FAILED",
          "Next": "setPackingOperationFailed"
        }
      ],
      "Default": "generateTransportationOptions"
    },
    "setPackingOperationInProgress": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "setPackingOperationStatus"
    },
    "generatePlacementOperationStatusCheck": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.generatePlacementOperationStatus.operationStatus",
          "StringEquals": "IN_PROGRESS",
          "Next": "generatePlacementOperationInProgress"
        },
        {
          "Variable": "$.generatePlacementOperationStatus.operationStatus",
          "StringEquals": "FAILED",
          "Next": "generatePlacementOperationFailed"
        }
      ],
      "Default": "listPlacementOptions"
    },
    "generatePlacementOperationInProgress": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "generatePlacementOperationStatus"
    },
    "generateTransportationOptions": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "inboundPlanId.$": "$.createInboundPlanResult.inboundPlanId",
          "placementOptionId.$": "$.listPlacementOptionsResult.placementOptionId",
          "shipmentId.$": "$.listPlacementOptionsResult.shipmentId",
          "readyToShipWindow.$": "$.generateTransportationOptionsRequest.readyToShipWindow",
          "contactInformation.$": "$.generateTransportationOptionsRequest.contactInformation",
          "freightInformation.$": "$.generateTransportationOptionsRequest.freightInformation",
          "palletDimensions.$": "$.generateTransportationOptionsRequest.palletDimensions",
          "stackability.$": "$.generateTransportationOptionsRequest.stackability",
          "palletWeight.$": "$.generateTransportationOptionsRequest.palletWeight"
        },
        "FunctionName": "${GenerateTransportationOptionsLambdaFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "generateTransportationOperationStatus",
      "ResultSelector": {
        "operationId.$": "$.Payload.operationId"
      },
      "ResultPath": "$.generateTransportationOptionsResult"
    },
    "generateTransportationOperationStatus": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${OperationStatusLambdaFunctionArn}",
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "operationId.$": "$.generateTransportationOptionsResult.operationId"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "generateTransportationOperationStatusCheck",
      "ResultSelector": {
        "operationStatus.$": "$.Payload.operationStatus",
        "operationProblems.$": "$.Payload.operationProblems"
      },
      "ResultPath": "$.generateTransportationOperationStatus"
    },
    "generateTransportationOperationStatusCheck": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.generateTransportationOperationStatus.operationStatus",
          "StringEquals": "FAILED",
          "Next": "generateTransportationOperationFailed"
        },
        {
          "Variable": "$.generateTransportationOperationStatus.operationStatus",
          "StringEquals": "IN_PROGRESS",
          "Next": "generateTransportationOperationInProgress"
        }
      ],
      "Default": "generateDeliveryWindowOptions"
    },
    "generateTransportationOperationFailed": {
      "Type": "Fail",
      "ErrorPath": "$.generateTransportationOperationStatus.operationStatus",
      "CausePath": "$.generateTransportationOperationStatus.operationProblems"
    },
    "generateDeliveryWindowOptions": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${GenerateDeliveryWindowOptionsLambdaFunctionArn}",
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "inboundPlanId.$": "$.createInboundPlanResult.inboundPlanId",
          "shipmentId.$": "$.listPlacementOptionsResult.shipmentId"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "generateDeliveryWindowOperationStatus",
      "ResultSelector": {
        "operationId.$": "$.Payload.operationId"
      },
      "ResultPath": "$.generateDeliveryWindowOptionsResult"
    },
    "generateDeliveryWindowOperationStatus": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${OperationStatusLambdaFunctionArn}",
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "operationId.$": "$.generateTransportationOptionsResult.operationId"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "generateDeliveryWindowOperationStatusCheck",
      "ResultSelector": {
        "operationStatus.$": "$.Payload.operationStatus",
        "operationProblems.$": "$.Payload.operationProblems"
      },
      "ResultPath": "$.generateDeliveryWindowOperationStatus"
    },
    "generateDeliveryWindowOperationStatusCheck": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.generateDeliveryWindowOperationStatus.operationStatus",
          "StringEquals": "FAILED",
          "Next": "generateDeliveryWindowOperationFailed"
        },
        {
          "Variable": "$.generateDeliveryWindowOperationStatus.operationStatus",
          "StringEquals": "IN_PROGRESS",
          "Next": "generateDeliveryWindowOperationInProgress"
        }
      ],
      "Default": "listTransportationOptions"
    },
    "generateDeliveryWindowOperationFailed": {
      "Type": "Fail",
      "ErrorPath": "$.generateDeliveryWindowOperationStatus.operationStatus",
      "CausePath": "$.generateDeliveryWindowOperationStatus.operationProblems"
    },
    "listTransportationOptions": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "inboundPlanId.$": "$.createInboundPlanResult.inboundPlanId",
          "placementOptionId.$": "$.listPlacementOptionsResult.placementOptionId"
        },
        "FunctionName": "${ListTransportationOptionsLambdaFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "listDeliveryWindowOptions",
      "ResultSelector": {
        "transportationOptionId.$": "$.Payload.transportationOptionId"
      },
      "ResultPath": "$.listTransportationOptionsResult"
    },
    "listDeliveryWindowOptions": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ListDeliveryWindowOptionsLambdaFunctionArn}",
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "inboundPlanId.$": "$.createInboundPlanResult.inboundPlanId",
          "shipmentId.$": "$.listPlacementOptionsResult.shipmentId"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "confirmDeliveryWindowOptions",
      "ResultSelector": {
        "deliveryWindowOptionId.$": "$.Payload.deliveryWindowOptionId"
      },
      "ResultPath": "$.listDeliveryWindowOptionsResult"
    },
    "confirmDeliveryWindowOptions": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ConfirmDeliveryWindowOptionsLambdaFunctionArn}",
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "inboundPlanId.$": "$.createInboundPlanResult.inboundPlanId",
          "shipmentId.$": "$.listPlacementOptionsResult.shipmentId",
          "deliveryWindowOptionId.$": "$.listDeliveryWindowOptionsResult.deliveryWindowOptionId"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "confirmDeliveryWindowOperationStatus",
      "ResultSelector": {
        "operationId.$": "$.Payload.operationId"
      },
      "ResultPath": "$.confirmDeliveryWindowOptionsResult"
    },
    "confirmDeliveryWindowOperationStatus": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "operationId.$": "$.confirmDeliveryWindowOptionsResult.operationId"
        },
        "FunctionName": "${OperationStatusLambdaFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "confirmDeliveryWindowOperationStatusCheck",
      "ResultSelector": {
        "operationStatus.$": "$.Payload.operationStatus",
        "operationProblems.$": "$.Payload.operationProblems"
      },
      "ResultPath": "$.confirmDeliveryWindowOperationStatus"
    },
    "confirmDeliveryWindowOperationStatusCheck": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.confirmDeliveryWindowOperationStatus.operationStatus",
          "StringEquals": "FAILED",
          "Next": "confirmDeliveryWindowOperationFailed"
        },
        {
          "Variable": "$.confirmDeliveryWindowOperationStatus.operationStatus",
          "StringEquals": "IN_PROGRESS",
          "Next": "confirmDeliveryWindowOperationInProgress"
        }
      ],
      "Default": "confirmTransportationOptions"
    },
    "confirmDeliveryWindowOperationFailed": {
      "Type": "Fail",
      "ErrorPath": "$.confirmDeliveryWindowOperationStatus.operationStatus",
      "CausePath": "$.confirmDeliveryWindowOperationStatus.operationProblems"
    },
    "confirmPlacementOperationFailed": {
      "Type": "Fail",
      "ErrorPath": "$.confirmPlacementOperationStatus.operationStatus",
      "CausePath": "$.confirmPlacementOperationStatus.operationProblems"
    },
    "confirmTransportationOptions": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "inboundPlanId.$": "$.createInboundPlanResult.inboundPlanId",
          "transportationOptionId.$": "$.listTransportationOptionsResult.transportationOptionId",
          "shipmentId.$": "$.listPlacementOptionsResult.shipmentId"
        },
        "FunctionName": "${ConfirmTransportationOptionsLambdaFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "confirmTransportationOperationStatus",
      "ResultSelector": {
        "operationId.$": "$.Payload.operationId"
      },
      "ResultPath": "$.confirmTransportationOptions"
    },
    "confirmTransportationOperationStatus": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${OperationStatusLambdaFunctionArn}",
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "operationId.$": "$.confirmTransportationOptions.operationId"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "confirmTransportationOperationStatusCheck",
      "ResultSelector": {
        "operationStatus.$": "$.Payload.operationStatus",
        "operationProblems.$": "$.Payload.operationProblems"
      },
      "ResultPath": "$.confirmTransportationOperationStatus"
    },
    "confirmTransportationOperationStatusCheck": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.confirmTransportationOperationStatus.operationStatus",
          "StringEquals": "FAILED",
          "Next": "confirmTransportationOperationFailed"
        },
        {
          "Variable": "$.confirmTransportationOperationStatus.operationStatus",
          "StringEquals": "IN_PROGRESS",
          "Next": "confirmTransportationOperationInProgress"
        }
      ],
      "Default": "getShipment"
    },
    "confirmTransportationOperationFailed": {
      "Type": "Fail",
      "ErrorPath": "$.confirmTransportationOperationStatus.operationStatus",
      "CausePath": "$.confirmTransportationOperationStatus.operationProblems"
    },
    "getShipment": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "inboundPlanId.$": "$.createInboundPlanResult.inboundPlanId",
          "shipmentId.$": "$.listPlacementOptionsResult.shipmentId"
        },
        "FunctionName": "${GetShipmentLambdaFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "shipmentConfirmationId.$": "$.Payload.shipmentConfirmationId"
      },
      "ResultPath": "$.getShipmentResult",
      "Next": "getLabels"
    },
    "getLabels": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "apiCredentials.$": "$.apiCredentials",
          "shipmentConfirmationId.$": "$.getShipmentResult.shipmentConfirmationId",
          "PageType.$": "$.getLabelsRequest.PageType",
          "PageSize.$": "$.getLabelsRequest.PageSize",
          "NumberOfPallets.$": "$.getLabelsRequest.NumberOfPallets",
          "LabelType.$": "$.getLabelsRequest.LabelType"
        },
        "FunctionName": "${GetLabelsLambdaFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "labelUrl.$": "$.Payload"
      },
      "ResultPath": "$.getLabelsResult",
      "Next": "Notify Label Generation"
    },
    "Notify Label Generation": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message": {
          "labelURL.$": "$.getLabelsResult.labelUrl"
        },
        "TopicArn": "${LabelGeneratedSNSTopicArn}"
      },
      "ResultPath": "$.LabelGenerationResult",
      "End": true
    },
    "createInboundOperationFailed": {
      "Type": "Fail",
      "ErrorPath": "$.getInboundPlanOperationStatus.operationStatus",
      "CausePath": "$.getInboundPlanOperationStatus.operationProblems"
    },
    "setPackingOperationFailed": {
      "Type": "Fail",
      "ErrorPath": "$.setPackingOperationStatus.operationStatus",
      "CausePath": "$.setPackingOperationStatus.operationProblems"
    },
    "generatePlacementOperationFailed": {
      "Type": "Fail",
      "ErrorPath": "$.generatePlacementOperationStatus.operationStatus",
      "CausePath": "$.generatePlacementOperationStatus.operationProblems"
    },
    "generateTransportationOperationInProgress": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "generateTransportationOperationStatus"
    },
    "confirmPlacementOperationInProgress": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "confirmPlacementOperationStatus"
    },
    "confirmTransportationOperationInProgress": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "confirmTransportationOperationStatus"
    },
    "generateDeliveryWindowOperationInProgress": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "generateDeliveryWindowOperationStatus"
    },
    "confirmDeliveryWindowOperationInProgress": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "confirmDeliveryWindowOperationStatus"
    }
  }
}