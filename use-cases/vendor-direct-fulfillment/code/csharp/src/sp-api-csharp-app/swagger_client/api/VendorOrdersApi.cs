/* 
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using spApiCsharpApp.swaggerClient.Client;
using spApiCsharpApp.swaggerClient.Model.DirectFulfillmentInventory;
using Amazon.SellingPartnerAPIAA;
using spApiCsharpApp.swaggerClient.Model.DirectFulfillmentOrders;

namespace spApiCsharpApp.swaggerClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVendorOrdersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>GetOrderResponse</returns>
        GetOrderResponse GetOrder (string purchaseOrderNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>ApiResponse of GetOrderResponse</returns>
        ApiResponse<GetOrderResponse> GetOrderWithHttpInfo (string purchaseOrderNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to true)</param>
        /// <returns>GetOrdersResponse</returns>
        GetOrdersResponse GetOrders (DateTime? createdAfter, DateTime? createdBefore, string shipFromPartyId = null, string status = null, long? limit = null, string sortOrder = null, string nextToken = null, string includeDetails = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to true)</param>
        /// <returns>ApiResponse of GetOrdersResponse</returns>
        ApiResponse<GetOrdersResponse> GetOrdersWithHttpInfo (DateTime? createdAfter, DateTime? createdBefore, string shipFromPartyId = null, string status = null, long? limit = null, string sortOrder = null, string nextToken = null, string includeDetails = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SubmitAcknowledgementResponse</returns>
        SubmitAcknowledgementResponse SubmitAcknowledgement (SubmitAcknowledgementRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SubmitAcknowledgementResponse</returns>
        ApiResponse<SubmitAcknowledgementResponse> SubmitAcknowledgementWithHttpInfo (SubmitAcknowledgementRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>Task of GetOrderResponse</returns>
        System.Threading.Tasks.Task<GetOrderResponse> GetOrderAsync (string purchaseOrderNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>Task of ApiResponse (GetOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOrderResponse>> GetOrderAsyncWithHttpInfo (string purchaseOrderNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to true)</param>
        /// <returns>Task of GetOrdersResponse</returns>
        System.Threading.Tasks.Task<GetOrdersResponse> GetOrdersAsync (DateTime? createdAfter, DateTime? createdBefore, string shipFromPartyId = null, string status = null, long? limit = null, string sortOrder = null, string nextToken = null, string includeDetails = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (GetOrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOrdersResponse>> GetOrdersAsyncWithHttpInfo (DateTime? createdAfter, DateTime? createdBefore, string shipFromPartyId = null, string status = null, long? limit = null, string sortOrder = null, string nextToken = null, string includeDetails = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SubmitAcknowledgementResponse</returns>
        System.Threading.Tasks.Task<SubmitAcknowledgementResponse> SubmitAcknowledgementAsync (SubmitAcknowledgementRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SubmitAcknowledgementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmitAcknowledgementResponse>> SubmitAcknowledgementAsyncWithHttpInfo (SubmitAcknowledgementRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VendorOrdersApi : IVendorOrdersApi
    {
        private spApiCsharpApp.swaggerClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorOrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VendorOrdersApi(spApiCsharpApp.swaggerClient.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = spApiCsharpApp.swaggerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public spApiCsharpApp.swaggerClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public spApiCsharpApp.swaggerClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>GetOrderResponse</returns>
        public GetOrderResponse GetOrder (string purchaseOrderNumber)
        {
             ApiResponse<GetOrderResponse> localVarResponse = GetOrderWithHttpInfo(purchaseOrderNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>ApiResponse of GetOrderResponse</returns>
        public ApiResponse< GetOrderResponse > GetOrderWithHttpInfo (string purchaseOrderNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling VendorOrdersApi->GetOrder");

            var localVarPath = "/vendor/directFulfillment/orders/v1/purchaseOrders/{purchaseOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOrderResponse)));
        }

        /// <summary>
        ///  Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>Task of GetOrderResponse</returns>
        public async System.Threading.Tasks.Task<GetOrderResponse> GetOrderAsync (string purchaseOrderNumber)
        {
             ApiResponse<GetOrderResponse> localVarResponse = await GetOrderAsyncWithHttpInfo(purchaseOrderNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseOrderNumber">The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.</param>
        /// <returns>Task of ApiResponse (GetOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetOrderResponse>> GetOrderAsyncWithHttpInfo (string purchaseOrderNumber)
        {
            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
                throw new ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling VendorOrdersApi->GetOrder");

            var localVarPath = "/vendor/directFulfillment/orders/v1/purchaseOrders/{purchaseOrderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (purchaseOrderNumber != null) localVarPathParams.Add("purchaseOrderNumber", this.Configuration.ApiClient.ParameterToString(purchaseOrderNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOrderResponse)));
        }

        /// <summary>
        ///  Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to true)</param>
        /// <returns>GetOrdersResponse</returns>
        public GetOrdersResponse GetOrders (DateTime? createdAfter, DateTime? createdBefore, string shipFromPartyId = null, string status = null, long? limit = null, string sortOrder = null, string nextToken = null, string includeDetails = null)
        {
             ApiResponse<GetOrdersResponse> localVarResponse = GetOrdersWithHttpInfo(createdAfter, createdBefore, shipFromPartyId, status, limit, sortOrder, nextToken, includeDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to true)</param>
        /// <returns>ApiResponse of GetOrdersResponse</returns>
        public ApiResponse< GetOrdersResponse > GetOrdersWithHttpInfo (DateTime? createdAfter, DateTime? createdBefore, string shipFromPartyId = null, string status = null, long? limit = null, string sortOrder = null, string nextToken = null, string includeDetails = null)
        {
            // verify the required parameter 'createdAfter' is set
            if (createdAfter == null)
                throw new ApiException(400, "Missing required parameter 'createdAfter' when calling VendorOrdersApi->GetOrders");
            // verify the required parameter 'createdBefore' is set
            if (createdBefore == null)
                throw new ApiException(400, "Missing required parameter 'createdBefore' when calling VendorOrdersApi->GetOrders");

            var localVarPath = "/vendor/directFulfillment/orders/v1/purchaseOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipFromPartyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipFromPartyId", shipFromPartyId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter
            if (includeDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDetails", includeDetails)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOrdersResponse)));
        }

        /// <summary>
        ///  Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to true)</param>
        /// <returns>Task of GetOrdersResponse</returns>
        public async System.Threading.Tasks.Task<GetOrdersResponse> GetOrdersAsync (DateTime? createdAfter, DateTime? createdBefore, string shipFromPartyId = null, string status = null, long? limit = null, string sortOrder = null, string nextToken = null, string includeDetails = null)
        {
             ApiResponse<GetOrdersResponse> localVarResponse = await GetOrdersAsyncWithHttpInfo(createdAfter, createdBefore, shipFromPartyId, status, limit, sortOrder, nextToken, includeDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAfter">Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="createdBefore">Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.</param>
        /// <param name="shipFromPartyId">The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses. (optional)</param>
        /// <param name="status">Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status. (optional)</param>
        /// <param name="limit">The limit to the number of purchase orders returned. (optional)</param>
        /// <param name="sortOrder">Sort the list in ascending or descending order by order creation date. (optional)</param>
        /// <param name="nextToken">Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)</param>
        /// <param name="includeDetails">When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (GetOrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetOrdersResponse>> GetOrdersAsyncWithHttpInfo (DateTime? createdAfter, DateTime? createdBefore, string shipFromPartyId = null, string status = null, long? limit = null, string sortOrder = null, string nextToken = null, string includeDetails = null)
        {
            // verify the required parameter 'createdAfter' is set
            if (createdAfter == null)
                throw new ApiException(400, "Missing required parameter 'createdAfter' when calling VendorOrdersApi->GetOrders");
            // verify the required parameter 'createdBefore' is set
            if (createdBefore == null)
                throw new ApiException(400, "Missing required parameter 'createdBefore' when calling VendorOrdersApi->GetOrders");

            var localVarPath = "/vendor/directFulfillment/orders/v1/purchaseOrders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipFromPartyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shipFromPartyId", shipFromPartyId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextToken", nextToken)); // query parameter
            if (includeDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDetails", includeDetails)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOrdersResponse)));
        }

        /// <summary>
        ///  Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SubmitAcknowledgementResponse</returns>
        public SubmitAcknowledgementResponse SubmitAcknowledgement (SubmitAcknowledgementRequest body)
        {
             ApiResponse<SubmitAcknowledgementResponse> localVarResponse = SubmitAcknowledgementWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SubmitAcknowledgementResponse</returns>
        public ApiResponse< SubmitAcknowledgementResponse > SubmitAcknowledgementWithHttpInfo (SubmitAcknowledgementRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VendorOrdersApi->SubmitAcknowledgement");

            var localVarPath = "/vendor/directFulfillment/orders/v1/acknowledgements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitAcknowledgement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmitAcknowledgementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubmitAcknowledgementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmitAcknowledgementResponse)));
        }

        /// <summary>
        ///  Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SubmitAcknowledgementResponse</returns>
        public async System.Threading.Tasks.Task<SubmitAcknowledgementResponse> SubmitAcknowledgementAsync (SubmitAcknowledgementRequest body)
        {
             ApiResponse<SubmitAcknowledgementResponse> localVarResponse = await SubmitAcknowledgementAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Submits acknowledgements for one or more purchase orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="spApiCsharpApp.swaggerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SubmitAcknowledgementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmitAcknowledgementResponse>> SubmitAcknowledgementAsyncWithHttpInfo (SubmitAcknowledgementRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VendorOrdersApi->SubmitAcknowledgement");

            var localVarPath = "/vendor/directFulfillment/orders/v1/acknowledgements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitAcknowledgement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmitAcknowledgementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubmitAcknowledgementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmitAcknowledgementResponse)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public VendorOrdersApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                
                spApiCsharpApp.swaggerClient.Client.Configuration configuration = new spApiCsharpApp.swaggerClient.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.Timeout = 100000;

                return new VendorOrdersApi(configuration);
            }
        }
    }
}
