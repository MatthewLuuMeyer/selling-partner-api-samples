# coding: utf-8

"""
    Selling Partner API for Notifications

    The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, see the [Notifications Use Case Guide](doc:notifications-api-v1-use-case-guide).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from src.api_models.notification_api.swagger_client.models.aggregation_filter import AggregationFilter  # noqa: F401,E501

class EventFilter(AggregationFilter):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marketplace_ids': 'MarketplaceIds',
        'order_change_types': 'OrderChangeTypes',
        'event_filter_type': 'str'
    }
    if hasattr(AggregationFilter, "swagger_types"):
        swagger_types.update(AggregationFilter.swagger_types)

    attribute_map = {
        'marketplace_ids': 'marketplaceIds',
        'order_change_types': 'orderChangeTypes',
        'event_filter_type': 'eventFilterType'
    }
    if hasattr(AggregationFilter, "attribute_map"):
        attribute_map.update(AggregationFilter.attribute_map)

    def __init__(self, marketplace_ids=None, order_change_types=None, event_filter_type=None, *args, **kwargs):  # noqa: E501
        """EventFilter - a model defined in Swagger"""  # noqa: E501
        self._marketplace_ids = None
        self._order_change_types = None
        self._event_filter_type = None
        self.discriminator = None
        if marketplace_ids is not None:
            self.marketplace_ids = marketplace_ids
        if order_change_types is not None:
            self.order_change_types = order_change_types
        self.event_filter_type = event_filter_type
        AggregationFilter.__init__(self, *args, **kwargs)

    @property
    def marketplace_ids(self):
        """Gets the marketplace_ids of this EventFilter.  # noqa: E501


        :return: The marketplace_ids of this EventFilter.  # noqa: E501
        :rtype: MarketplaceIds
        """
        return self._marketplace_ids

    @marketplace_ids.setter
    def marketplace_ids(self, marketplace_ids):
        """Sets the marketplace_ids of this EventFilter.


        :param marketplace_ids: The marketplace_ids of this EventFilter.  # noqa: E501
        :type: MarketplaceIds
        """

        self._marketplace_ids = marketplace_ids

    @property
    def order_change_types(self):
        """Gets the order_change_types of this EventFilter.  # noqa: E501


        :return: The order_change_types of this EventFilter.  # noqa: E501
        :rtype: OrderChangeTypes
        """
        return self._order_change_types

    @order_change_types.setter
    def order_change_types(self, order_change_types):
        """Sets the order_change_types of this EventFilter.


        :param order_change_types: The order_change_types of this EventFilter.  # noqa: E501
        :type: OrderChangeTypes
        """

        self._order_change_types = order_change_types

    @property
    def event_filter_type(self):
        """Gets the event_filter_type of this EventFilter.  # noqa: E501

        An eventFilterType value that is supported by the specific notificationType. This is used by the subscription service to determine the type of event filter. Refer to the section of the [Notifications Use Case Guide](doc:notifications-api-v1-use-case-guide) that describes the specific notificationType to determine if an eventFilterType is supported.  # noqa: E501

        :return: The event_filter_type of this EventFilter.  # noqa: E501
        :rtype: str
        """
        return self._event_filter_type

    @event_filter_type.setter
    def event_filter_type(self, event_filter_type):
        """Sets the event_filter_type of this EventFilter.

        An eventFilterType value that is supported by the specific notificationType. This is used by the subscription service to determine the type of event filter. Refer to the section of the [Notifications Use Case Guide](doc:notifications-api-v1-use-case-guide) that describes the specific notificationType to determine if an eventFilterType is supported.  # noqa: E501

        :param event_filter_type: The event_filter_type of this EventFilter.  # noqa: E501
        :type: str
        """
        if event_filter_type is None:
            raise ValueError("Invalid value for `event_filter_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ANY_OFFER_CHANGED", "ORDER_CHANGE"]  # noqa: E501
        if event_filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_filter_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_filter_type, allowed_values)
            )

        self._event_filter_type = event_filter_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
