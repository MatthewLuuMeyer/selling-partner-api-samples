{
  "Comment": "SP-API state machine",
  "StartAt": "Retrieve Order",
  "States": {
    "Retrieve Order": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${RetrieveOrderLambdaFunctionArn}",
        "Payload": {
          "credentials.$": "$.credentials"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "orderItems.$": "$.Payload.mfnOrder.orderItems",
        "shipFromAddress.$": "$.Payload.mfnOrder.shipFromAddress",
        "shipToAddress.$": "$.Payload.mfnOrder.shipToAddress"
      },
      "ResultPath": "$.mfnOrder",
      "Next": "Inventory Check"
    },
    "Inventory Check": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "InputPath": "$",
      "Parameters": {
        "FunctionName": "${InventoryCheckLambdaFunctionArn}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "orderItems.$": "$.Payload.mfnOrder.orderItems",
        "shipFromAddress.$": "$.Payload.mfnOrder.shipFromAddress",
        "shipToAddress.$": "$.Payload.mfnOrder.shipToAddress",
        "weight.$": "$.Payload.mfnOrder.weight",
        "dimensions.$": "$.Payload.mfnOrder.dimensions"
      },
      "ResultPath": "$.mfnOrder",
      "Next": "Check One Click Shipment"
    },
    "Check One Click Shipment": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.credentials.oneClickShipment",
          "StringEquals": "y",
          "Next": "One Click Shipment"
        }
      ],
      "Default": "Get Rates"
    },
    "One Click Shipment": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${OneClickShipmentLambdaFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 5,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Presign S3 Label",
      "ResultSelector": {
        "labelFormat.$": "$.Payload.labelFormat",
        "dimensions.$": "$.Payload.dimensions",
        "fileContents.$": "$.Payload.fileContents"
      },
      "ResultPath": "$.label"
    },
    "Get Rates": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${GetRatesLambdaFunctionArn}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "rates.$": "$.Payload.rates",
        "requestToken.$": "$.Payload.request_token"
      },
      "ResultPath": "$.rates",
      "Next": "Select Shipment"
    },
    "Select Shipment": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${SelectShipmentLambdaFunctionArn}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "preferredRate.$": "$.Payload.rates.preferredRate",
        "requiresAdditionalInputs.$": "$.Payload.rates.preferredRate.requiresAdditionalInputs",
        "requestToken.$": "$.Payload.rates.requestToken",
        "rates.$": "$.Payload.rates.rates"
      },
      "ResultPath": "$.rates",
      "Next": "GetAdditionalInputsChoice"
    },
    "GetAdditionalInputsChoice": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.rates.requiresAdditionalInputs",
          "BooleanEquals": true,
          "Next": "Get Additional Input"
        }
      ],
      "Default": "Purchase Shipment"
    },
    "Get Additional Input": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${GetAdditionalInputsLambdaFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "additionalInputs.$": "$"
      },
      "Next": "Purchase Shipment"
    },
    "Purchase Shipment": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${PurchaseShipmentLambdaFunctionArn}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "labelFormat.$": "$.Payload.labelFormat",
        "dimensions.$": "$.Payload.dimensions",
        "fileContents.$": "$.Payload.fileContents"
      },
      "ResultPath": "$.label",
      "Next": "Presign S3 Label"
    },
    "Presign S3 Label": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${PresignS3LabelLambdaFunctionArn}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "presignedUrl.$": "$.Payload"
      },
      "ResultPath": "$.label.s3",
      "Next": "Notify Label Generation"
    },
    "Notify Label Generation": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "${NotificationTopicArn}",
        "Message": {
          "LabelPresignedUrl.$": "$.label.s3.presignedUrl"
        }
      },
      "End": true
    }
  }
}