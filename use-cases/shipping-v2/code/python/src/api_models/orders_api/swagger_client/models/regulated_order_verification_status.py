# coding: utf-8

"""
    Selling Partner API for Orders

    The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools. The Orders API only supports orders that are less than two years old. Orders more than two years old will not show in the API response.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from src.api_models.orders_api.swagger_client.configuration import Configuration


class RegulatedOrderVerificationStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'VerificationStatus',
        'requires_merchant_action': 'bool',
        'valid_rejection_reasons': 'list[RejectionReason]',
        'rejection_reason': 'RejectionReason',
        'review_date': 'str',
        'external_reviewer_id': 'str'
    }

    attribute_map = {
        'status': 'Status',
        'requires_merchant_action': 'RequiresMerchantAction',
        'valid_rejection_reasons': 'ValidRejectionReasons',
        'rejection_reason': 'RejectionReason',
        'review_date': 'ReviewDate',
        'external_reviewer_id': 'ExternalReviewerId'
    }

    def __init__(self, status=None, requires_merchant_action=None, valid_rejection_reasons=None, rejection_reason=None, review_date=None, external_reviewer_id=None, _configuration=None):  # noqa: E501
        """RegulatedOrderVerificationStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._requires_merchant_action = None
        self._valid_rejection_reasons = None
        self._rejection_reason = None
        self._review_date = None
        self._external_reviewer_id = None
        self.discriminator = None

        self.status = status
        self.requires_merchant_action = requires_merchant_action
        self.valid_rejection_reasons = valid_rejection_reasons
        if rejection_reason is not None:
            self.rejection_reason = rejection_reason
        if review_date is not None:
            self.review_date = review_date
        if external_reviewer_id is not None:
            self.external_reviewer_id = external_reviewer_id

    @property
    def status(self):
        """Gets the status of this RegulatedOrderVerificationStatus.  # noqa: E501

        The verification status of the order.  # noqa: E501

        :return: The status of this RegulatedOrderVerificationStatus.  # noqa: E501
        :rtype: VerificationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RegulatedOrderVerificationStatus.

        The verification status of the order.  # noqa: E501

        :param status: The status of this RegulatedOrderVerificationStatus.  # noqa: E501
        :type: VerificationStatus
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def requires_merchant_action(self):
        """Gets the requires_merchant_action of this RegulatedOrderVerificationStatus.  # noqa: E501

        When true, the regulated information provided in the order requires a review by the merchant.  # noqa: E501

        :return: The requires_merchant_action of this RegulatedOrderVerificationStatus.  # noqa: E501
        :rtype: bool
        """
        return self._requires_merchant_action

    @requires_merchant_action.setter
    def requires_merchant_action(self, requires_merchant_action):
        """Sets the requires_merchant_action of this RegulatedOrderVerificationStatus.

        When true, the regulated information provided in the order requires a review by the merchant.  # noqa: E501

        :param requires_merchant_action: The requires_merchant_action of this RegulatedOrderVerificationStatus.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and requires_merchant_action is None:
            raise ValueError("Invalid value for `requires_merchant_action`, must not be `None`")  # noqa: E501

        self._requires_merchant_action = requires_merchant_action

    @property
    def valid_rejection_reasons(self):
        """Gets the valid_rejection_reasons of this RegulatedOrderVerificationStatus.  # noqa: E501

        A list of valid rejection reasons that may be used to reject the order's regulated information.  # noqa: E501

        :return: The valid_rejection_reasons of this RegulatedOrderVerificationStatus.  # noqa: E501
        :rtype: list[RejectionReason]
        """
        return self._valid_rejection_reasons

    @valid_rejection_reasons.setter
    def valid_rejection_reasons(self, valid_rejection_reasons):
        """Sets the valid_rejection_reasons of this RegulatedOrderVerificationStatus.

        A list of valid rejection reasons that may be used to reject the order's regulated information.  # noqa: E501

        :param valid_rejection_reasons: The valid_rejection_reasons of this RegulatedOrderVerificationStatus.  # noqa: E501
        :type: list[RejectionReason]
        """
        if self._configuration.client_side_validation and valid_rejection_reasons is None:
            raise ValueError("Invalid value for `valid_rejection_reasons`, must not be `None`")  # noqa: E501

        self._valid_rejection_reasons = valid_rejection_reasons

    @property
    def rejection_reason(self):
        """Gets the rejection_reason of this RegulatedOrderVerificationStatus.  # noqa: E501

        The reason for rejecting the order's regulated information. Not present if the order isn't rejected.  # noqa: E501

        :return: The rejection_reason of this RegulatedOrderVerificationStatus.  # noqa: E501
        :rtype: RejectionReason
        """
        return self._rejection_reason

    @rejection_reason.setter
    def rejection_reason(self, rejection_reason):
        """Sets the rejection_reason of this RegulatedOrderVerificationStatus.

        The reason for rejecting the order's regulated information. Not present if the order isn't rejected.  # noqa: E501

        :param rejection_reason: The rejection_reason of this RegulatedOrderVerificationStatus.  # noqa: E501
        :type: RejectionReason
        """

        self._rejection_reason = rejection_reason

    @property
    def review_date(self):
        """Gets the review_date of this RegulatedOrderVerificationStatus.  # noqa: E501

        The date the order was reviewed. In ISO 8601 date time format.  # noqa: E501

        :return: The review_date of this RegulatedOrderVerificationStatus.  # noqa: E501
        :rtype: str
        """
        return self._review_date

    @review_date.setter
    def review_date(self, review_date):
        """Sets the review_date of this RegulatedOrderVerificationStatus.

        The date the order was reviewed. In ISO 8601 date time format.  # noqa: E501

        :param review_date: The review_date of this RegulatedOrderVerificationStatus.  # noqa: E501
        :type: str
        """

        self._review_date = review_date

    @property
    def external_reviewer_id(self):
        """Gets the external_reviewer_id of this RegulatedOrderVerificationStatus.  # noqa: E501

        The identifier for the order's regulated information reviewer.  # noqa: E501

        :return: The external_reviewer_id of this RegulatedOrderVerificationStatus.  # noqa: E501
        :rtype: str
        """
        return self._external_reviewer_id

    @external_reviewer_id.setter
    def external_reviewer_id(self, external_reviewer_id):
        """Sets the external_reviewer_id of this RegulatedOrderVerificationStatus.

        The identifier for the order's regulated information reviewer.  # noqa: E501

        :param external_reviewer_id: The external_reviewer_id of this RegulatedOrderVerificationStatus.  # noqa: E501
        :type: str
        """

        self._external_reviewer_id = external_reviewer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegulatedOrderVerificationStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegulatedOrderVerificationStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegulatedOrderVerificationStatus):
            return True

        return self.to_dict() != other.to_dict()
