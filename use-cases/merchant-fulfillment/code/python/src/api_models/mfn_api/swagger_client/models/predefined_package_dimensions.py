# coding: utf-8

"""
    Selling Partner API for Merchant Fulfillment

    The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from src.api_models.mfn_api.swagger_client.configuration import Configuration


class PredefinedPackageDimensions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    FEDEX_BOX_10KG = "FedEx_Box_10kg"
    FEDEX_BOX_25KG = "FedEx_Box_25kg"
    FEDEX_BOX_EXTRA_LARGE_1 = "FedEx_Box_Extra_Large_1"
    FEDEX_BOX_EXTRA_LARGE_2 = "FedEx_Box_Extra_Large_2"
    FEDEX_BOX_LARGE_1 = "FedEx_Box_Large_1"
    FEDEX_BOX_LARGE_2 = "FedEx_Box_Large_2"
    FEDEX_BOX_MEDIUM_1 = "FedEx_Box_Medium_1"
    FEDEX_BOX_MEDIUM_2 = "FedEx_Box_Medium_2"
    FEDEX_BOX_SMALL_1 = "FedEx_Box_Small_1"
    FEDEX_BOX_SMALL_2 = "FedEx_Box_Small_2"
    FEDEX_ENVELOPE = "FedEx_Envelope"
    FEDEX_PADDED_PAK = "FedEx_Padded_Pak"
    FEDEX_PAK_1 = "FedEx_Pak_1"
    FEDEX_PAK_2 = "FedEx_Pak_2"
    FEDEX_TUBE = "FedEx_Tube"
    FEDEX_XL_PAK = "FedEx_XL_Pak"
    UPS_BOX_10KG = "UPS_Box_10kg"
    UPS_BOX_25KG = "UPS_Box_25kg"
    UPS_EXPRESS_BOX = "UPS_Express_Box"
    UPS_EXPRESS_BOX_LARGE = "UPS_Express_Box_Large"
    UPS_EXPRESS_BOX_MEDIUM = "UPS_Express_Box_Medium"
    UPS_EXPRESS_BOX_SMALL = "UPS_Express_Box_Small"
    UPS_EXPRESS_ENVELOPE = "UPS_Express_Envelope"
    UPS_EXPRESS_HARD_PAK = "UPS_Express_Hard_Pak"
    UPS_EXPRESS_LEGAL_ENVELOPE = "UPS_Express_Legal_Envelope"
    UPS_EXPRESS_PAK = "UPS_Express_Pak"
    UPS_EXPRESS_TUBE = "UPS_Express_Tube"
    UPS_LABORATORY_PAK = "UPS_Laboratory_Pak"
    UPS_PAD_PAK = "UPS_Pad_Pak"
    UPS_PALLET = "UPS_Pallet"
    USPS_CARD = "USPS_Card"
    USPS_FLAT = "USPS_Flat"
    USPS_FLATRATECARDBOARDENVELOPE = "USPS_FlatRateCardboardEnvelope"
    USPS_FLATRATEENVELOPE = "USPS_FlatRateEnvelope"
    USPS_FLATRATEGIFTCARDENVELOPE = "USPS_FlatRateGiftCardEnvelope"
    USPS_FLATRATELEGALENVELOPE = "USPS_FlatRateLegalEnvelope"
    USPS_FLATRATEPADDEDENVELOPE = "USPS_FlatRatePaddedEnvelope"
    USPS_FLATRATEWINDOWENVELOPE = "USPS_FlatRateWindowEnvelope"
    USPS_LARGEFLATRATEBOARDGAMEBOX = "USPS_LargeFlatRateBoardGameBox"
    USPS_LARGEFLATRATEBOX = "USPS_LargeFlatRateBox"
    USPS_LETTER = "USPS_Letter"
    USPS_MEDIUMFLATRATEBOX1 = "USPS_MediumFlatRateBox1"
    USPS_MEDIUMFLATRATEBOX2 = "USPS_MediumFlatRateBox2"
    USPS_REGIONALRATEBOXA1 = "USPS_RegionalRateBoxA1"
    USPS_REGIONALRATEBOXA2 = "USPS_RegionalRateBoxA2"
    USPS_REGIONALRATEBOXB1 = "USPS_RegionalRateBoxB1"
    USPS_REGIONALRATEBOXB2 = "USPS_RegionalRateBoxB2"
    USPS_REGIONALRATEBOXC = "USPS_RegionalRateBoxC"
    USPS_SMALLFLATRATEBOX = "USPS_SmallFlatRateBox"
    USPS_SMALLFLATRATEENVELOPE = "USPS_SmallFlatRateEnvelope"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self, _configuration=None):  # noqa: E501
        """PredefinedPackageDimensions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PredefinedPackageDimensions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PredefinedPackageDimensions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PredefinedPackageDimensions):
            return True

        return self.to_dict() != other.to_dict()
