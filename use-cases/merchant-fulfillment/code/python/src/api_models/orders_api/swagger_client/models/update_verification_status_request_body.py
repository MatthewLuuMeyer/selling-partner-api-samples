# coding: utf-8

"""
    Selling Partner API for Orders

    The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools. The Orders API only supports orders that are less than two years old. Orders more than two years old will not show in the API response.  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from src.api_models.orders_api.swagger_client.configuration import Configuration


class UpdateVerificationStatusRequestBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'VerificationStatus',
        'external_reviewer_id': 'str',
        'rejection_reason_id': 'str'
    }

    attribute_map = {
        'status': 'status',
        'external_reviewer_id': 'externalReviewerId',
        'rejection_reason_id': 'rejectionReasonId'
    }

    def __init__(self, status=None, external_reviewer_id=None, rejection_reason_id=None, _configuration=None):  # noqa: E501
        """UpdateVerificationStatusRequestBody - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._external_reviewer_id = None
        self._rejection_reason_id = None
        self.discriminator = None

        self.status = status
        self.external_reviewer_id = external_reviewer_id
        if rejection_reason_id is not None:
            self.rejection_reason_id = rejection_reason_id

    @property
    def status(self):
        """Gets the status of this UpdateVerificationStatusRequestBody.  # noqa: E501

        The new verification status of the order.  # noqa: E501

        :return: The status of this UpdateVerificationStatusRequestBody.  # noqa: E501
        :rtype: VerificationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateVerificationStatusRequestBody.

        The new verification status of the order.  # noqa: E501

        :param status: The status of this UpdateVerificationStatusRequestBody.  # noqa: E501
        :type: VerificationStatus
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def external_reviewer_id(self):
        """Gets the external_reviewer_id of this UpdateVerificationStatusRequestBody.  # noqa: E501

        The identifier for the order's regulated information reviewer.  # noqa: E501

        :return: The external_reviewer_id of this UpdateVerificationStatusRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._external_reviewer_id

    @external_reviewer_id.setter
    def external_reviewer_id(self, external_reviewer_id):
        """Sets the external_reviewer_id of this UpdateVerificationStatusRequestBody.

        The identifier for the order's regulated information reviewer.  # noqa: E501

        :param external_reviewer_id: The external_reviewer_id of this UpdateVerificationStatusRequestBody.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and external_reviewer_id is None:
            raise ValueError("Invalid value for `external_reviewer_id`, must not be `None`")  # noqa: E501

        self._external_reviewer_id = external_reviewer_id

    @property
    def rejection_reason_id(self):
        """Gets the rejection_reason_id of this UpdateVerificationStatusRequestBody.  # noqa: E501

        The unique identifier for the rejection reason used for rejecting the order's regulated information. Only required if the new status is rejected.  # noqa: E501

        :return: The rejection_reason_id of this UpdateVerificationStatusRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._rejection_reason_id

    @rejection_reason_id.setter
    def rejection_reason_id(self, rejection_reason_id):
        """Sets the rejection_reason_id of this UpdateVerificationStatusRequestBody.

        The unique identifier for the rejection reason used for rejecting the order's regulated information. Only required if the new status is rejected.  # noqa: E501

        :param rejection_reason_id: The rejection_reason_id of this UpdateVerificationStatusRequestBody.  # noqa: E501
        :type: str
        """

        self._rejection_reason_id = rejection_reason_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateVerificationStatusRequestBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateVerificationStatusRequestBody):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateVerificationStatusRequestBody):
            return True

        return self.to_dict() != other.to_dict()
